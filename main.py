from fastapi import FastAPI, Request, Form
from fastapi.responses import HTMLResponse, RedirectResponse
from fastapi.staticfiles import StaticFiles
from fastapi.templating import Jinja2Templates
import smtplib
from email.mime.text import MIMEText
import logging

app = FastAPI()

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –ü–∞–ø–∫–∏
app.mount("/static", StaticFiles(directory="static"), name="static")
templates = Jinja2Templates(directory="templates")

# üìß SMTP –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è ‚Äî –Ω–æ–≤—ã–π –∞–∫–∫–∞—É–Ω—Ç
SMTP_SERVER = "smtp.gmail.com"
SMTP_PORT = 587
EMAIL_FROM = "profidata.tech@gmail.com"
EMAIL_TO = "profidata.tech@gmail.com"
EMAIL_PASSWORD = "yhbb ipdm shsh ynbx"  # –ü–∞—Ä–æ–ª—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è

@app.get("/", response_class=HTMLResponse)
async def read_root(request: Request):
    return templates.TemplateResponse("index.html", {"request": request})


@app.post("/send-contact")
async def send_contact(request: Request, name: str = Form(...), phone: str = Form(...), message: str = Form("")):
    try:
        logger.info(f"–ü–æ–ª—É—á–µ–Ω–∞ –∑–∞—è–≤–∫–∞: {name}, {phone}")

        # –í–∞–ª–∏–¥–∞—Ü–∏—è –Ω–æ–º–µ—Ä–∞
        if not phone.startswith("+7") or len(phone) != 12 or not phone[2:].isdigit():
            return RedirectResponse(url="/?error=–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –Ω–æ–º–µ—Ä–∞", status_code=303)

        # –¢–µ–∫—Å—Ç –ø–∏—Å—å–º–∞
        email_body = f"""
        –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞:

        –ò–º—è: {name}
        –¢–µ–ª–µ—Ñ–æ–Ω: {phone}
        –°–æ–æ–±—â–µ–Ω–∏–µ: {message or '‚Äî'}
        """

        msg = MIMEText(email_body)
        msg["Subject"] = f"–ó–∞—è–≤–∫–∞ –æ—Ç {name}"
        msg["From"] = EMAIL_FROM
        msg["To"] = EMAIL_TO

        # –û—Ç–ø—Ä–∞–≤–∫–∞
        with smtplib.SMTP(SMTP_SERVER, SMTP_PORT) as server:
            server.starttls()
            server.login(EMAIL_FROM, EMAIL_PASSWORD)
            server.send_message(msg)

        return RedirectResponse(url="/?success=true", status_code=303)

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: {e}")
        return RedirectResponse(url="/?error=–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞", status_code=303)

if __name__ == "__main__":
    import uvicorn
    uvicorn.run(app, host="0.0.0.0", port=8000)
